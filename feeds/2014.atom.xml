<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Tony S. Yu</title><link href="http://tonysyu.github.io/" rel="alternate"></link><link href="http://tonysyu.github.io/feeds/2014.atom.xml" rel="self"></link><id>http://tonysyu.github.io/</id><updated>2014-09-01T00:00:00-04:00</updated><entry><title>IPython (Jupyter) widgets: An image convolution demo</title><link href="http://tonysyu.github.io/ipython-jupyter-widgets-an-image-convolution-demo.html" rel="alternate"></link><updated>2014-09-01T00:00:00-04:00</updated><author><name>Tony S. Yu</name></author><id>tag:tonysyu.github.io,2014-09-01:ipython-jupyter-widgets-an-image-convolution-demo.html</id><summary type="html">&lt;p&gt;Convolution is one of the fundamental concepts of image processing (and
more generally, signal processing). For the &lt;a class="reference external" href="http://tonysyu.github.io/scikit-image-tutorial-at-scipy-2014.html"&gt;scikit-image tutorial at Scipy
2014&lt;/a&gt;,
I created an IPython widget to help visualize convolution. This post
explains that widget in more detail.&lt;/p&gt;
&lt;p&gt;Only a small portion of this post is actually about using the widget API.
&lt;a class="reference external" href="http://nbviewer.ipython.org/github/ipython/ipython/blob/master/examples/Interactive%20Widgets/Index.ipynb"&gt;IPython notebook widgets&lt;/a&gt; have a really easy-to-use API, so only a small
bit of code is necessary. That said, this is a really nice demo of both image
convolution and the usefulness of IPython widgets.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you want run the notebook version of this post (&lt;a class="reference external" href="http://tonysyu.github.io/includes/image_convolution_widget.ipynb"&gt;Download Notebook&lt;/a&gt;),
you'll need:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://ipython.org/"&gt;IPython&lt;/a&gt; &amp;gt;= 2.0&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://matplotlib.org/"&gt;matplotlib&lt;/a&gt; &amp;gt;= 1.3 (earlier versions
probably work)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://scikit-image.org/"&gt;scikit-image&lt;/a&gt; &amp;gt;= 0.9&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Aside about plotting...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Before we get started, let's define a bit of boilerplate that's useful
for any IPython notebook dealing with images:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt; &lt;span class="n"&gt;inline&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;

&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rcParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;image.cmap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;gray&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rcParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;image.interpolation&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;none&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I &lt;em&gt;highly&lt;/em&gt; recommend setting the default colormap to &lt;cite&gt;'gray'&lt;/cite&gt; for images
and pretty much everything else. (There are, however, exceptions, as
you'll see below.) Also, using nearest neighbor interpolation (which is
what &lt;cite&gt;'none'&lt;/cite&gt; does for zoomed-in images) makes pixel boundaries clearer.&lt;/p&gt;
&lt;div class="section" id="image-convolution"&gt;
&lt;h2&gt;Image convolution&lt;/h2&gt;
&lt;p&gt;The basic idea of image convolution is that you take an image like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;skimage&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;

&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;# Ignore the Gaussian filter, for now.&lt;/span&gt;
&lt;span class="c"&gt;# (This is explained at the end of the article.)&lt;/span&gt;
&lt;span class="n"&gt;smooth_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gaussian_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;smooth_image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="Blurred camera-man image" src="http://tonysyu.github.io/images/posts/2014/camera_man_with_blur.png" /&gt;
&lt;p&gt;... and filter the image using a convolution &lt;strong&gt;&amp;quot;kernel&amp;quot;&lt;/strong&gt; that looks like
this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="n"&gt;horizontal_edge_kernel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                   &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;span class="c"&gt;# Use non-gray colormap to display negative values as red and positive&lt;/span&gt;
&lt;span class="c"&gt;# values as blue.&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;horizontal_edge_kernel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RdBu&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="Image of horizontal-Sobel kernel" src="http://tonysyu.github.io/images/posts/2014/horizontal_sobel_filter.png" /&gt;
&lt;p&gt;... to arrive at a result that looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scipy.ndimage&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;convolve&lt;/span&gt;

&lt;span class="n"&gt;horizontal_edge_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;convolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;smooth_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;horizontal_edge_kernel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;horizontal_edge_response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RdBu&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="Camera-man image after horizontal-Sobel filtering" src="http://tonysyu.github.io/images/posts/2014/camera_man_with_hsobel.png" /&gt;
&lt;p&gt;As the variable names suggest, this filter highlights the horizontal edges of
an image. We'll see what's happening here later on.&lt;/p&gt;
&lt;p&gt;(Note that the coloring in the kernel and the filtered image come from the
colormap that's used. The output is still a grayscale image: The red just
means that a value is negative, and the blue is positive.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="an-ipython-widget-for-demonstrating-image-convolution"&gt;
&lt;h2&gt;An IPython widget for demonstrating image convolution&lt;/h2&gt;
&lt;p&gt;We're going to develop an IPython widget that looks something like this:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Image of convolution widget" src="http://tonysyu.github.io/images/posts/2014/mean_filter_demo_step_19.png" /&gt;
&lt;/div&gt;
&lt;p&gt;The slider in the widget allows you to step through the convolution process for
each pixel in an image. The image (a white square with a black background) used
for the demo is really boring to make the filtering process clearer.&lt;/p&gt;
&lt;p&gt;The plot on the left shows the original, unfiltered, image. On top of that, we
overlay the kernel position: The center pixel of the kernel is tinted red, and
the remaining pixels in the kernel are tinted yellow. The red pixel is the one
being replaced by the current step of the convolution procedure, while red and
yellow pixels are used to determine the replacement value.&lt;/p&gt;
&lt;p&gt;On the right, we see the image at the &lt;tt class="docutils literal"&gt;i&lt;/tt&gt;th step of the convolution
process, which gives the (partially) filtered result.&lt;/p&gt;
&lt;p&gt;Before we get started though, let's define some helper functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-helper-functions"&gt;
&lt;h2&gt;Some helper functions&lt;/h2&gt;
&lt;p&gt;Helper functions are great: They make code much more readable and
reusable, which is what we should all be striving for. It's not
necessary to understand these functions right away. You can easily skip
over this for now, and revisit it if you have questions about the actual
widget implementation. The function names, themselves, should be enough
to describe their... ahem... functionality (except for
&lt;tt class="docutils literal"&gt;iter_kernel_labels&lt;/tt&gt;, that one's tough to describe succinctly).&lt;/p&gt;
&lt;div class="section" id="iterate-over-pixels-with-iter-pixels"&gt;
&lt;h3&gt;Iterate over pixels with &lt;tt class="docutils literal"&gt;iter_pixels&lt;/tt&gt;&lt;/h3&gt;
&lt;p&gt;First of all, we're going to want to look at the individual pixels of an
image. So, let's define an iterator (or actually a generator) to make
that easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;iter_pixels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Yield pixel position (row, column) and pixel intensity. &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This &amp;quot;yields&amp;quot; the row, column, and pixel value for each iteration of a
loop. By the way: You wouldn't normally loop over pixels (since Python
loops are a bit slow) but the whole point of this widget is to go
step-by-step.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="showing-images-side-by-side-with-imshow-pair"&gt;
&lt;h3&gt;Showing images side-by-side with &lt;tt class="docutils literal"&gt;imshow_pair&lt;/tt&gt;&lt;/h3&gt;
&lt;p&gt;Like I said, I like small utility functions, so I pulled out the code to
plot side-by-side images into its own function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;imshow_pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_pair&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;titles&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ncols&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;axes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ravel&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;image_pair&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;titles&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dealing-with-boundary-conditions"&gt;
&lt;h3&gt;Dealing with boundary conditions&lt;/h3&gt;
&lt;p&gt;What's the hardest part of any math problem (discrete, or otherwise)?&lt;/p&gt;
&lt;p&gt;Boundary conditions! (That's what they tell engineers, at least. If
you're doing &amp;quot;real&amp;quot; math that's probably not true. Actually, even if
that's not the case, it's probably not true.)&lt;/p&gt;
&lt;p&gt;There are many different solutions to dealing with boundaries; what
we're going to do is just pad the input image with zeros based on the
size of the kernel.&lt;/p&gt;
&lt;div class="section" id="calculating-border-padding-with-padding-for-kernel"&gt;
&lt;h4&gt;Calculating border padding with &lt;tt class="docutils literal"&gt;padding_for_kernel&lt;/tt&gt;&lt;/h4&gt;
&lt;p&gt;First we define, a utility function to figure out how much padding to
add based on the kernel shape. Basically, this just calculates the
number of pixels that extend beyond the center pixel:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;padding_for_kernel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Return the amount of padding needed for each side of an image.&lt;/span&gt;

&lt;span class="sd"&gt;    For example, if the returned result is [1, 2], then this means an&lt;/span&gt;
&lt;span class="sd"&gt;    image should be padded with 1 extra row on top and bottom, and 2&lt;/span&gt;
&lt;span class="sd"&gt;    extra columns on the left and right.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c"&gt;# Slice to ignore RGB channels if they exist.&lt;/span&gt;
    &lt;span class="n"&gt;image_shape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c"&gt;# We only handle kernels with odd dimensions so make sure that&amp;#39;s true.&lt;/span&gt;
    &lt;span class="c"&gt;# (The &amp;quot;center&amp;quot; pixel of an even number of pixels is arbitrary.)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;image_shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;image_shape&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="padding-an-image-border-with-add-padding"&gt;
&lt;h4&gt;Padding an image border with &lt;tt class="docutils literal"&gt;add_padding&lt;/tt&gt;&lt;/h4&gt;
&lt;p&gt;Then we define another utility function that uses the above function to
pad the border of an image with zeros:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_padding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;h_pad&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w_pad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;padding_for_kernel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;h_pad&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h_pad&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w_pad&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w_pad&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
                  &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;constant&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;constant_values&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="reverse-add-padding-with-remove-padding"&gt;
&lt;h4&gt;Reverse &lt;tt class="docutils literal"&gt;add_padding&lt;/tt&gt; with &lt;tt class="docutils literal"&gt;remove_padding&lt;/tt&gt;&lt;/h4&gt;
&lt;p&gt;And sometimes, we need to take the padded image (or more likely, a
filtered version of the padded image), and trim away the padded region,
so we define a function to remove padding based on the kernel shape:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;remove_padding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;inner_region&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  &lt;span class="c"&gt;# A 2D slice for grabbing the inner image region&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pad&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;padding_for_kernel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;slice_i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pad&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nb"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pad&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pad&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;inner_region&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slice_i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;inner_region&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="padding-demo"&gt;
&lt;h4&gt;Padding demo&lt;/h4&gt;
&lt;p&gt;Just to make those functions a bit clearer, let's run through a demo. If
you have an image that has a shape like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="literal-block"&gt;
(10, 20)
&lt;/pre&gt;
&lt;p&gt;... and a kernel that has a shape like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;kernel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="literal-block"&gt;
(3, 5)
&lt;/pre&gt;
&lt;p&gt;... adding padding to the image gives:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;padded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add_padding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;padded&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="literal-block"&gt;
(12, 24)
&lt;/pre&gt;
&lt;p&gt;Note that the total amount of padding is actually one less than the
kernel size since you only need to add padding for &lt;em&gt;neighbors&lt;/em&gt; of the
center pixel, but not the center pixel, itself. (If this isn't clear,
hopefully it will become clear when we start visualizing.)&lt;/p&gt;
&lt;p&gt;And of course, using &lt;tt class="docutils literal"&gt;remove_padding&lt;/tt&gt; gives us the original shape:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remove_padding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;padded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="literal-block"&gt;
(10, 20)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="slicing-into-the-image-with-window-slice"&gt;
&lt;h3&gt;Slicing into the image with &lt;tt class="docutils literal"&gt;window_slice&lt;/tt&gt;&lt;/h3&gt;
&lt;p&gt;We're going to iterate over the pixels of an image and apply the
convolution kernel in the 2D neighborhood (i.e. &amp;quot;window&amp;quot;) of each pixel.
To that end, it really helps to have an easy way to slice into an image
based on the center of the kernel and the kernel shape, so here's a
pretty simple way of doing that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;window_slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;center&lt;/span&gt;
    &lt;span class="n"&gt;r_pad&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c_pad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;padding_for_kernel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# Slicing is (inclusive, exclusive) so add 1 to the stop value&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r_pad&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;r_pad&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c_pad&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;c_pad&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;center&lt;/tt&gt; parameter is just the (row, column) index corresponding
to the center of the image patch where we'll be applying the convolution
kernel.&lt;/p&gt;
&lt;p&gt;As a quick example, take a 2D array that looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="literal-block"&gt;
[[ 0  1  2  3]
 [10 11 12 13]
 [20 21 22 23]
 [30 31 32 33]]
&lt;/pre&gt;
&lt;p&gt;The values in this array are carefully chosen: The first and second digit
match the row and column index.&lt;/p&gt;
&lt;p&gt;We can use &lt;tt class="docutils literal"&gt;window_slice&lt;/tt&gt; to slice-out a 3x3 window of our array as
follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;dummy_kernel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c"&gt;# We only care about the shape&lt;/span&gt;
&lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;window_slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dummy_kernel&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="literal-block"&gt;
[[ 0  1  2]
 [10 11 12]
 [20 21 22]]
&lt;/pre&gt;
&lt;p&gt;Note that the center pixel is 11, which corresponds to row 1, column 1
of the original array. We can increment the column to shift to the
right:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;window_slice&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dummy_kernel&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="literal-block"&gt;
[[ 1  2  3]
 [11 12 13]
 [21 22 23]]
&lt;/pre&gt;
&lt;p&gt;Or increment the row to shift down:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;window_slice&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dummy_kernel&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="literal-block"&gt;
[[10 11 12]
 [20 21 22]
 [30 31 32]]
&lt;/pre&gt;
&lt;p&gt;Non-square kernels would work too:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;dummy_kernel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;window_slice&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dummy_kernel&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="literal-block"&gt;
[[11]
 [21]
 [31]]
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="applying-the-kernel-to-an-image-patch-with-apply-kernel"&gt;
&lt;h3&gt;Applying the kernel to an image patch with &lt;tt class="docutils literal"&gt;apply_kernel&lt;/tt&gt;&lt;/h3&gt;
&lt;p&gt;To actually &amp;quot;apply&amp;quot; the convolution kernel to an image patch, we just
grab an image patch based on the center location and the kernel shape,
and then &amp;quot;apply&amp;quot; the kernel by taking the sum of pixel intensities under
the kernel, weighted by the kernel values:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;apply_kernel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;original_image&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;image_patch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;original_image&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;window_slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="c"&gt;# An element-wise multiplication followed by the sum&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;image_patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Technically, convolution requires flipping the kernel horizontally and
vertically, but that's not really an important detail here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="labeling-the-kernel-position-with-iter-kernel-labels"&gt;
&lt;h3&gt;Labeling the kernel position with &lt;tt class="docutils literal"&gt;iter_kernel_labels&lt;/tt&gt;&lt;/h3&gt;
&lt;p&gt;The whole point of this widget is to visualize how convolution works, so
we need a way to display where the convolution kernel is located at any
given iteration. To that end, we do a bit of array manipulation to mark:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Pixels &lt;em&gt;under&lt;/em&gt; the kernel with a value of 1&lt;/li&gt;
&lt;li&gt;The pixel at the center of the kernel with a value of 2&lt;/li&gt;
&lt;li&gt;All other pixels with a value of 0&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;iter_kernel_labels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Yield position and kernel labels for each pixel in the image.&lt;/span&gt;

&lt;span class="sd"&gt;    The kernel label-image has a 2 at the center and 1 for every other&lt;/span&gt;
&lt;span class="sd"&gt;    pixel &amp;quot;under&amp;quot; the kernel. Pixels not under the kernel are labeled as 0.&lt;/span&gt;

&lt;span class="sd"&gt;    Note that the mask is the same size as the input image.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;original_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add_padding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;i_pad&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j_pad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;padding_for_kernel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;pixel&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iter_pixels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original_image&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# Shift the center of the kernel to ignore padded border.&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;i_pad&lt;/span&gt;
        &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;j_pad&lt;/span&gt;
        &lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# Background = 0&lt;/span&gt;
        &lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;window_slice&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="c"&gt;# Kernel = 1&lt;/span&gt;
        &lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;                           &lt;span class="c"&gt;# Kernel-center = 2&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;mask&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="visualizing-our-kernel-overlay-with-visualize-kernel"&gt;
&lt;h3&gt;Visualizing our kernel overlay with &lt;tt class="docutils literal"&gt;visualize_kernel&lt;/tt&gt;&lt;/h3&gt;
&lt;p&gt;Now we want to take those 1s and 2s marking our kernel, and turn that
into a color overlay. We do that using a little utility from
scikit-image that overlays label values onto an image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;skimage&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;visualize_kernel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kernel_labels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Return a composite image, where 1&amp;#39;s are yellow and 2&amp;#39;s are red.&lt;/span&gt;

&lt;span class="sd"&gt;    See `iter_kernel_labels` for info on the meaning of 1 and 2.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label2rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kernel_labels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bg_label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;yellow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we color the center value (i.e. 2) red and neighboring values (i.e. 1)
yellow. The background value (i.e. 0) is transparent.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ipython-widget-demo"&gt;
&lt;h2&gt;IPython widget demo&lt;/h2&gt;
&lt;p&gt;So all of the above helper functions were just to get us to this point:
Making our own IPython widget.&lt;/p&gt;
&lt;p&gt;But before that (such a tease), here's a &lt;em&gt;really&lt;/em&gt; basic example of IPython
widgets, in case the concept is completely new to you.&lt;/p&gt;
&lt;div class="section" id="a-very-simple-widget"&gt;
&lt;h3&gt;A very simple widget&lt;/h3&gt;
&lt;p&gt;To define your own IPython widget, all you need to do is pass a function
and the argument(s) you want to control to &lt;tt class="docutils literal"&gt;widgets.interact&lt;/tt&gt;. So a
very simple example would just be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.html&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;widgets&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;i = {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c"&gt;# This should be executed in an IPython notebook!&lt;/span&gt;
&lt;span class="n"&gt;widgets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;printer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you run this code in an IPython notebook, you should see a slider and
&lt;tt class="docutils literal"&gt;i = 5&lt;/tt&gt; printed by default. Moving the slider changes the value printed by
&lt;tt class="docutils literal"&gt;printer&lt;/tt&gt;. The keyword argument, &lt;tt class="docutils literal"&gt;i&lt;/tt&gt;, must match the argument name in
&lt;tt class="docutils literal"&gt;printer&lt;/tt&gt;; that's how slider value gets connected to the &lt;tt class="docutils literal"&gt;printer&lt;/tt&gt;
function.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-stepper-function-for-image-convolution"&gt;
&lt;h3&gt;A stepper function for image convolution&lt;/h3&gt;
&lt;p&gt;For the real widget, we're going to combine all of the helper functions
defined above. Unfortunately, there are a couple of things here that make
the code a bit more complicated than I would like:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;First, I wanted to make something that's fairly reusable. To that
end, the following code snippet creates a function that &lt;em&gt;returns&lt;/em&gt; the
function passed to &lt;tt class="docutils literal"&gt;widgets.interact&lt;/tt&gt;. That way we can prep the
image and cache results (see below).&lt;/li&gt;
&lt;li&gt;This function-that-returns-a-function is called a closure. Here's a
pretty good explanation of the concept: &lt;a class="reference external" href="http://stackoverflow.com/a/141426/260303"&gt;Closure
explanation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I'm going to do a bit of work here to cache results so that the demo
function only computes the filtered result for each pixel once.
Basically, we iterate over pixels in order, so we can cache a result
for a pixel, and then we reuse the result to compute the result for
the next pixel.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_convolution_step_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# Initialize generator since we&amp;#39;re only ever going to iterate over&lt;/span&gt;
    &lt;span class="c"&gt;# a pixel once. The cached result is used, if we step back.&lt;/span&gt;
    &lt;span class="n"&gt;gen_kernel_labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iter_kernel_labels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;image_cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add_padding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convolution_step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i_step&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Plot original image and kernel-overlay next to filtered image.&lt;/span&gt;

&lt;span class="sd"&gt;        For a given step, check if it&amp;#39;s in the image cache. If not&lt;/span&gt;
&lt;span class="sd"&gt;        calculate all necessary images, then plot the requested step.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="c"&gt;# Create all images up to the current step, unless they&amp;#39;re already&lt;/span&gt;
        &lt;span class="c"&gt;# cached:&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i_step&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_cache&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

            &lt;span class="c"&gt;# For the first step (`i_step == 0`), the original image is the&lt;/span&gt;
            &lt;span class="c"&gt;# filtered image; after that we look in the cache, which stores&lt;/span&gt;
            &lt;span class="c"&gt;# (`kernel_overlay`, `filtered`).&lt;/span&gt;
            &lt;span class="n"&gt;filtered_prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i_step&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;image_cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="c"&gt;# We don&amp;#39;t want to overwrite the previously filtered image:&lt;/span&gt;
            &lt;span class="n"&gt;filtered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filtered_prev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="c"&gt;# Get the labels used to visualize the kernel&lt;/span&gt;
            &lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel_labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gen_kernel_labels&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="c"&gt;# Modify the pixel value at the kernel center&lt;/span&gt;
            &lt;span class="n"&gt;filtered&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apply_kernel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c"&gt;# Take the original image and overlay our kernel visualization&lt;/span&gt;
            &lt;span class="n"&gt;kernel_overlay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;visualize_kernel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kernel_labels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c"&gt;# Save images for reuse.&lt;/span&gt;
            &lt;span class="n"&gt;image_cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;kernel_overlay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filtered&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="c"&gt;# Remove padding we added to deal with boundary conditions&lt;/span&gt;
        &lt;span class="c"&gt;# (Loop since each step has 2 images)&lt;/span&gt;
        &lt;span class="n"&gt;image_pair&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;remove_padding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;image_cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i_step&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
        &lt;span class="n"&gt;imshow_pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_pair&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;convolution_step&lt;/span&gt;  &lt;span class="c"&gt;# &amp;lt;-- this is a function&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we just initialize the stepper function and pass that to
&lt;tt class="docutils literal"&gt;widgets.interact&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.html.widgets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;IntSliderWidget&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;interactive_convolution_demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;stepper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_convolution_step_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;step_slider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IntSliderWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;widgets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stepper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i_step&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;step_slider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There's a bit of tweaking here just to get the slider widget to start
off at zero, but that's not crucial. You could have used&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;widgets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stepper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i_step&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;but that would start with the slider at the midpoint, which isn't ideal
for this particular demo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="demo-mean-filtering"&gt;
&lt;h3&gt;Demo: Mean filtering&lt;/h3&gt;
&lt;p&gt;Up until this point, the code written here would work perfectly well in
a normal python script. To actually &lt;em&gt;use&lt;/em&gt; the widget, however, we need to
execute the following lines in an IPython notebook (&lt;a class="reference external" href="http://tonysyu.github.io/includes/image_convolution_widget.ipynb"&gt;Download Notebook&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Before using this widget, let's define a really small image, which makes
this demo easier to understand:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="n"&gt;bright_square&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bright_square&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bright_square&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="Simple test image for demo" src="http://tonysyu.github.io/images/posts/2014/convolution_demo_test_image.png" /&gt;
&lt;p&gt;One of the classic smoothing filters is the mean filter. As you might
expect, it calculates the mean under the kernel. The kernel itself is
just the weights used for the mean. For 3x3 kernel, this looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mean_kernel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mean_kernel&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="n"&gt;mean_kernel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mean_kernel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="literal-block"&gt;
[[ 0.11111111  0.11111111  0.11111111]
 [ 0.11111111  0.11111111  0.11111111]
 [ 0.11111111  0.11111111  0.11111111]]
&lt;/pre&gt;
&lt;p&gt;These weights will then be multiplied by pixel intensities using
&lt;tt class="docutils literal"&gt;apply_kernel&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Using our convolution widget, we can see how the mean-filtering process looks,
step-by-step:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# This should be executed in an IPython notebook!&lt;/span&gt;
&lt;span class="n"&gt;titles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Image and kernel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Filtered image&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;interactive_convolution_demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bright_square&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mean_kernel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="n"&gt;vmax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;titles&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;titles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which would create the following widget in an IPython notebook:&lt;/p&gt;
&lt;img alt="First step of image of mean-filter widget" src="http://tonysyu.github.io/images/posts/2014/mean_filter_demo_step_0.png" /&gt;
&lt;p&gt;This sets up the widget at the first step of the convolution process. (As with
most arrays/matrices, we'll start counting at the top-left corner). The
filtered image (on the right) is unchanged because the kernel is centered on
a very boring region (all zeros; including the out-of-bounds values, which are
padded with zeros).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Boundary conditions, revisited:&lt;/strong&gt; If you look at &lt;tt class="docutils literal"&gt;i_step = 0&lt;/tt&gt;, you
can see why we went through the trouble of defining all that
image-padding code: If we want to apply the convolution kernel to the
top-left pixel, it has no neighbors above it or to the left. Adding
padding (which was removed for display) allows us to handle those cases
without too much trouble.&lt;/p&gt;
&lt;p&gt;As you increment &lt;tt class="docutils literal"&gt;i_step&lt;/tt&gt;, you should see how the filtered image changes as
non-zero pixels fall under the kernel:&lt;/p&gt;
&lt;img alt="Intermediate step of image of mean-filter widget" src="http://tonysyu.github.io/images/posts/2014/mean_filter_demo_step_19.png" /&gt;
&lt;img alt="Final step of image of mean-filter widget" src="http://tonysyu.github.io/images/posts/2014/mean_filter_demo_step_48.png" /&gt;
&lt;p&gt;After playing around with the widget, you should notice that the mean
kernel is really simple:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Weight each pixel under the kernel (red+yellow) equally&lt;/li&gt;
&lt;li&gt;Add all products (pixel-values × 1/9) together&lt;/li&gt;
&lt;li&gt;Replace center pixel (red) with the sum&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the filtered result, hard edges are smoothed: Since a pixel on an
edge will be bordering both white and black pixels, the filtered result
will be gray. This smoothing effect can be useful for blurring an image
or removing noise (although &lt;a class="reference external" href="http://scikit-image.org/docs/dev/auto_examples/plot_denoise.html"&gt;edge-preserving denoising filters&lt;/a&gt; are probably
preferable).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="demo-edge-filtering"&gt;
&lt;h3&gt;Demo: Edge filtering&lt;/h3&gt;
&lt;p&gt;Finally, let's look at another really useful and easy-to-understand
filter: The edge filter. For images, edges are basically boundaries
between light and dark values. An easy way to calculate that is to take
the difference of neighboring values.&lt;/p&gt;
&lt;p&gt;Here, we'll use the Sobel kernel for detecting horizontal edges (which
was defined at the very beginning):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;horizontal_edge_kernel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="literal-block"&gt;
[[ 1  2  1]
 [ 0  0  0]
 [-1 -2 -1]]
&lt;/pre&gt;
&lt;p&gt;Basically, using this kernel to calculate a weighted sum will subtract
neighboring values &lt;em&gt;below&lt;/em&gt; the center pixel from those &lt;em&gt;above&lt;/em&gt; the
center. If pixels above and below the center are the same, the filtered
result is 0, but if they are very different, we get a strong &amp;quot;edge&amp;quot;
response.&lt;/p&gt;
&lt;p&gt;Again, using our convolution widget, we can step through the process
quite easily:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# This should be executed in an IPython notebook!&lt;/span&gt;
&lt;span class="n"&gt;interactive_convolution_demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bright_square&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;horizontal_edge_kernel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="n"&gt;vmin&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vmax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RdBu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="First step of image of Sobel-filter widget" src="http://tonysyu.github.io/images/posts/2014/sobel_filter_demo_step_0.png" /&gt;
&lt;p&gt;Again, we start off at a very boring region of the image, where all pixels
under the kernel are zero. Incrementing the step shows the edge-filter at work:&lt;/p&gt;
&lt;img alt="Intermediate step of image of Sobel-filter widget" src="http://tonysyu.github.io/images/posts/2014/sobel_filter_demo_step_18.png" /&gt;
&lt;img alt="Final step of image of Sobel-filter widget" src="http://tonysyu.github.io/images/posts/2014/sobel_filter_demo_step_48.png" /&gt;
&lt;p&gt;Play around with the widget a bit. You should notice that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;This filter responds to horizontal edges (i.e. it is sensitive to the
orientation of the edge).&lt;/li&gt;
&lt;li&gt;The filter responds differently when going from white-to-black vs
black-to-white (i.e. it is sensitive to the direction of the edge).&lt;/li&gt;
&lt;li&gt;The edge response diminishes as it approaches a vertical boundary. This is
because the kernel has a finite width (i.e. it's 3x3 instead of 3x1).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Often, you don't really care about the orientation or direction of the
edge. In that case, you would just combine the horizontal-edge filter
with the corresponding vertical-edge filter and calculate the gradient
magnitude. This is exactly what the standard &lt;a class="reference external" href="http://scikit-image.org/docs/dev/auto_examples/plot_edge_filter.html"&gt;Sobel filter&lt;/a&gt; does.&lt;/p&gt;
&lt;p&gt;I hope that clarifies the idea of convolution filters.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="leftovers"&gt;
&lt;h2&gt;Leftovers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;em&gt;Why did the first example use a&lt;/em&gt; &lt;tt class="docutils literal"&gt;gaussian_filter&lt;/tt&gt;&lt;em&gt;?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Edge filters (which are basically just derivatives) enhance noise.  We do
some smoothing beforehand to reduce the likelihood of false edges.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;em&gt;Why are the &amp;quot;edges&amp;quot; (the red and blue regions) in that last filtered image
so thick?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The edge filter used here gives what's called a &amp;quot;centered difference&amp;quot;. In
reality, the edges lie in-between pixel values, so the closest we can get
(without biasing the edge up or down) is to mark the pixels above and below
the edge.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;em&gt;What do you mean by &amp;quot;neighbors&amp;quot; and &amp;quot;under&amp;quot; the kernel?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In the kernel overlay, red marks the center pixel, yellow marks the
neighbors, and both red and yellow pixels are &amp;quot;under&amp;quot; the kernel.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;em&gt;Does the step-order matter?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;No. The widget steps from the top-left pixel down to the bottom-right
pixel, but this order is arbitrary. The filtered value at each step is
calculated from the &lt;em&gt;original&lt;/em&gt; values so previous steps don't matter.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://tonysyu.github.io/includes/image_convolution_widget.ipynb"&gt;Notebook version of this article&lt;/a&gt; (so you can actually use the widgets.)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://tonysyu.github.io/scikit-image-tutorial-at-scipy-2014.html"&gt;scikit-image tutorial at Scipy 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Really useful linear filters:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="http://scikit-image.org/docs/dev/api/skimage.filter.html#gaussian-filter"&gt;Gaussian filter&lt;/a&gt;, the classic smoothing filter&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://scikit-image.org/docs/dev/auto_examples/plot_edge_filter.html"&gt;Sobel filter&lt;/a&gt; for detection edges (a little different from the above
since it takes the gradient magnitude, which means it doesn't care about
direction or orientation)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Useful generic filters:&lt;ul&gt;
&lt;li&gt;Generic (local) filters work in a similar fashion to the convolution
filters described above, but they aren't limited to a linear,
weighted sum.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://scikit-image.org/docs/dev/auto_examples/plot_denoise.html"&gt;Denoising filters&lt;/a&gt; for removing noise without smoothing edges.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://scikit-image.org/docs/dev/auto_examples/applications/plot_rank_filters.html"&gt;Rank filters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://scikit-image.org/docs/dev/auto_examples/applications/plot_morphology.html"&gt;Morphological filters&lt;/a&gt; for manipulating shapes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="IPython"></category><category term="scikit-image"></category><category term="matplotlib"></category><category term="scipy"></category><category term="numpy"></category></entry><entry><title>pypath-magic</title><link href="http://tonysyu.github.io/pypath-magic.html" rel="alternate"></link><updated>2014-08-04T00:00:00-04:00</updated><author><name>Tony S. Yu</name></author><id>tag:tonysyu.github.io,2014-08-04:pypath-magic.html</id><summary type="html">&lt;div class="section" id="pypath-an-ipython-magic-for-manipulating-your-python-path"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;%pypath&lt;/tt&gt;: An IPython magic for manipulating your Python path&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Edit: Now with support for Python 3!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You're a pragmatic Python developer, so you extract the logically related bits
of your code into functions and group those functions together into modules.&lt;/p&gt;
&lt;p&gt;Now, &lt;strong&gt;how do you actually import those modules&lt;/strong&gt;? If you're in the directory containing those modules, you're good to go:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;  &lt;span class="c"&gt;# Desired files are in the same directory.&lt;/span&gt;
&lt;span class="n"&gt;data_wranglers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="n"&gt;plot_helpers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;plot_helpers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;plot_slope_marker&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Success&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If, instead, those files are located elsewhere, you might get something like
this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;  &lt;span class="c"&gt;# Desired files are somewhere else.&lt;/span&gt;
&lt;span class="n"&gt;data_wranglers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="n"&gt;plot_helpers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;plot_helpers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;plot_slope_marker&lt;/span&gt;
&lt;span class="o"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ne"&gt;ImportError&lt;/span&gt;                               &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;141&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;d0fef5fa475&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;plot_helpers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;plot_slope_marker&lt;/span&gt;

&lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;named&lt;/span&gt; &lt;span class="n"&gt;plot_helpers&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="quickfix-sys-path"&gt;
&lt;h3&gt;Quickfix: &lt;tt class="docutils literal"&gt;sys.path&lt;/tt&gt;&lt;/h3&gt;
&lt;p&gt;The quick fix here is to append to &lt;tt class="docutils literal"&gt;sys.path&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;path/to/my-utils&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;plot_helpers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;plot_slope_marker&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Success&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;But&lt;/strong&gt;, the next time you fire up python, you get the same &lt;tt class="docutils literal"&gt;ImportError&lt;/tt&gt; we
saw above.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="persistent-changes-to-your-path"&gt;
&lt;h3&gt;Persistent changes to your path&lt;/h3&gt;
&lt;p&gt;To make persistent changes to your Python path, you'll have to
&lt;a class="reference external" href="http://stackoverflow.com/questions/3402168/permanently-add-a-directory-to-pythonpath"&gt;tweak your PYTHONPATH&lt;/a&gt; or figure out how to &lt;a class="reference external" href="https://docs.python.org/2/library/site.html#module-site"&gt;add '*.pth' files to your
site-packages directory&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These solutions are annoying for most users and downright intimidating to newer
developers. With &lt;tt class="docutils literal"&gt;%pypath&lt;/tt&gt;, you can easily manipulate your Python path from
&lt;a class="reference external" href="http://ipython.org"&gt;IPython&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-use-pypath-magic"&gt;
&lt;h2&gt;How to use &lt;tt class="docutils literal"&gt;pypath_magic&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;pypath_magic&lt;/tt&gt; &lt;a class="reference external" href="https://github.com/tonysyu/pypath-magic"&gt;module&lt;/a&gt; adds
an &lt;a class="reference external" href="http://ipython.org/ipython-doc/dev/interactive/tutorial.html#magic-functions"&gt;IPython magic&lt;/a&gt; (err... &lt;a class="reference external" href="http://jupyter.org/"&gt;Jupyter&lt;/a&gt; magic?) command for easily manipulating
your Python path.&lt;/p&gt;
&lt;div class="section" id="load-the-extension"&gt;
&lt;h3&gt;Load the extension&lt;/h3&gt;
&lt;p&gt;To use the &lt;tt class="docutils literal"&gt;%pypath&lt;/tt&gt; magic command, just load the extension from an IPython
session:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;load_ext&lt;/span&gt; &lt;span class="n"&gt;pypath_magic&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="list-the-custom-paths"&gt;
&lt;h3&gt;List the custom paths&lt;/h3&gt;
&lt;p&gt;After loading, you will have access to the &lt;tt class="docutils literal"&gt;%pypath&lt;/tt&gt; magic. You can type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;pypath&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to list all the custom paths added by &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pypath-magic&lt;/span&gt;&lt;/tt&gt;. When you get started,
you won't have anything there.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="add-to-your-python-path"&gt;
&lt;h3&gt;Add to your Python path&lt;/h3&gt;
&lt;p&gt;To add some custom paths, just change to a directory and call &lt;tt class="docutils literal"&gt;%pypath &lt;span class="pre"&gt;-a&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;
&lt;span class="n"&gt;data_wranglers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="n"&gt;plot_helpers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;pypath&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;Added&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;/absolute/path/to/my-utils&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;pypath&lt;/span&gt;
&lt;span class="mf"&gt;0.&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;absolute&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can reuse those helper functions from anywhere:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;plot_helpers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;plot_slope_marker&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Changes to your Python path will persist across IPython sessions, and those
paths will be available outside of IPython.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="deleting-one-of-your-custom-paths"&gt;
&lt;h3&gt;Deleting one of your custom paths&lt;/h3&gt;
&lt;p&gt;If you later want to delete a directory from your path, just use
&lt;tt class="docutils literal"&gt;%pypath &lt;span class="pre"&gt;-d&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;pypath&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="n"&gt;Deleted&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;/absolute/path/to/my-utils&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;path.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="list-everything-in-your-python-path"&gt;
&lt;h3&gt;List everything in your Python path&lt;/h3&gt;
&lt;p&gt;You can also list your entire Python path with &lt;tt class="docutils literal"&gt;%pypath &lt;span class="pre"&gt;-l&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;pypath&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;

&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tonysyu&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;yutils&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tonysyu&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;skimage&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tonysyu&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mpl&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tonysyu&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tonysyu&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;deli&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tonysyu&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mpltools&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Applications&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Canopy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;appdata&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;canopy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.1975&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;macosx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Canopy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Contents&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python27&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Applications&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Canopy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;appdata&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;canopy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.1975&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;macosx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Canopy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Contents&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;absolute&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-and-deleting-using-arguments"&gt;
&lt;h3&gt;Adding and deleting using arguments&lt;/h3&gt;
&lt;p&gt;Finally, you can manipulate paths---without changing to those directories---by
passing arguments to the add and delete commands.&lt;/p&gt;
&lt;p&gt;First we add paths using relative or absolute directory paths:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;pypath&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;useful&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;
&lt;span class="n"&gt;Added&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;/absolute/path/to/useful-modules&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;pypath&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;absolute&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;stuff&lt;/span&gt;
&lt;span class="n"&gt;Added&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;/absolute/path/to/stuff&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;pypath&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;things&lt;/span&gt;
&lt;span class="n"&gt;Added&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;/absolute/path/to/things&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;pypath&lt;/span&gt;
&lt;span class="mf"&gt;0.&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;absolute&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;useful&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;
&lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;absolute&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;stuff&lt;/span&gt;
&lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;absolute&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;things&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice those numbers in the list above. We can use those indices to delete
paths, or we can delete using string paths:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;pypath&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Deleted&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;/absolute/path/to/stuff&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;path.&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;pypath&lt;/span&gt;
&lt;span class="mf"&gt;0.&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;absolute&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;useful&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;
&lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;absolute&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;things&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;pypath&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;useful&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;
&lt;span class="n"&gt;Deleted&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;/absolute/path/to/useful-modules&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;path.&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;pypath&lt;/span&gt;
&lt;span class="mf"&gt;0.&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;absolute&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;things&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="how-it-works"&gt;
&lt;h2&gt;How it works&lt;/h2&gt;
&lt;p&gt;The basic idea is really simple: The &lt;tt class="docutils literal"&gt;pypath&lt;/tt&gt; command just maintains a custom
&lt;tt class="docutils literal"&gt;*.pth&lt;/tt&gt; file in your site-packages directory. Altering that file alters the
paths in the Python path. Since this is a custom &lt;tt class="docutils literal"&gt;*.pth&lt;/tt&gt; file, you don't have
to worry about screwing up packages installed by other means.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install"&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;p&gt;To install using pip, just type the following in a terminal:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pip install pypath_magic
&lt;/pre&gt;
&lt;p&gt;Or if you're feeling lucky:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pip install git+https://github.com/tonysyu/pypath-magic
&lt;/pre&gt;
&lt;p&gt;Or if you want to go &lt;a class="reference external" href="https://github.com/tonysyu/pypath-magic"&gt;direct to the source&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git clone https://github.com/tonysyu/pypath-magic.git
$ cd pypath-magic
$ python setup.py install
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="dependencies"&gt;
&lt;h2&gt;Dependencies&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python 2.7/3.4 (older versions probably work, but this is not tested)&lt;/li&gt;
&lt;li&gt;IPython &amp;gt;= 1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="license"&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;New BSD (a.k.a. Modified BSD). See &lt;a class="reference external" href="https://github.com/tonysyu/pypath-magic/blob/master/LICENSE"&gt;LICENSE&lt;/a&gt; file in this directory for details.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="IPython"></category><category term="python"></category></entry><entry><title>Source control for scientists and soloists</title><link href="http://tonysyu.github.io/source-control-for-scientists-and-soloists.html" rel="alternate"></link><updated>2014-07-25T00:00:00-04:00</updated><author><name>Tony S. Yu</name></author><id>tag:tonysyu.github.io,2014-07-25:source-control-for-scientists-and-soloists.html</id><summary type="html">&lt;a class="reference external image-reference" href="http://git-scm.com/"&gt;&lt;img alt="" src="http://tonysyu.github.io/images/posts/2014/git_logo.png" /&gt;&lt;/a&gt;
&lt;p&gt;Normally when people talk about source control, they focus on collaboration: If
you're collaborating on code and you're not using source control, you're doing
it wrong! If you're collaborating with others, source control looks roughly
like this:&lt;/p&gt;
&lt;img alt="" src="http://tonysyu.github.io/images/posts/2014/git_collaborative_workspace.png" /&gt;
&lt;p&gt;If you're just working on your own code, though, you should still be
using source control. The soloist's workspace will look something like this:&lt;/p&gt;
&lt;img alt="" src="http://tonysyu.github.io/images/posts/2014/git_solo_workspace.png" /&gt;
&lt;p&gt;Whether or not you have a remote repository depends on how much you trust your
hard drive. If the above doesn't make sense, don't worry: These diagrams should
(I hope) become clear shortly.&lt;/p&gt;
&lt;p&gt;Here I'll be focusing on git, since it's what I use for my day-to-day routine,
but any (distributed) version/source/revision control software will do. Some
commands will differ for other software, but the basic concepts are still the
same.&lt;/p&gt;
&lt;div class="section" id="motivation"&gt;
&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;This is a text version of a presentation I gave for my old lab group---back in
the day when I was in academia. If &lt;em&gt;anyone&lt;/em&gt; needs to adopt source control, it's
scientific programmers: Scientists often develop code for themselves
(collaboration often focuses on the results, not the code), so we're prone to
think that source control is not relevant. The purpose of this article is to
convince you that source control is important---&lt;em&gt;even if you're the only one
looking at the code&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Here's why you should be using source control:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;(Unless you have unit tests) There are often huge time gaps between breaking
code, and realizing that your code was broken. Source control remembers when
you don't.&lt;/li&gt;
&lt;li&gt;You should document your rationale for changing code. (commit message)&lt;/li&gt;
&lt;li&gt;It's key to reproducible research: You keep a lab notebook for a reason (your
memory sucks). Version control is your code notebook.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because this motivation part is so important, I put this into context with
real-world examples below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="basic-concept"&gt;
&lt;h2&gt;Basic Concept&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Save code as logical sets of changes and write a good description of why you
changed it. (&lt;tt class="docutils literal"&gt;git commit&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;git add&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;Now you have a history of changes, that means you can:&lt;ul&gt;
&lt;li&gt;look back at your rationale (&lt;tt class="docutils literal"&gt;git log&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;change back if you need to (&lt;tt class="docutils literal"&gt;git checkout&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;find out where things went wrong (&lt;tt class="docutils literal"&gt;git blame&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;git bisect&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;remove code with the knowledge that you can easily go back&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="why-you-should-use-source-control"&gt;
&lt;h2&gt;Why you should use source control&lt;/h2&gt;
&lt;p&gt;The purpose of this article is to convince you to use source control, so I want
to give concrete examples of how source control helps you. These examples are
taken from a Matlab code base that I adopted. In addition to my frustrations
with dealing with Matlab (&amp;lt;3 Python), I had to navigate a code base that was
sorely lacking the benefits of source control, which is what prompted my
original presentation.&lt;/p&gt;
&lt;p&gt;All examples are taken from real changes that I made to my adopted code base.
Apologies to the original authors of this code.&lt;/p&gt;
&lt;div class="section" id="you-re-already-trying-to-fake-it"&gt;
&lt;h3&gt;You're already trying to fake it!&lt;/h3&gt;
&lt;p&gt;Here are some files from the code base I adopted.&lt;/p&gt;
&lt;img alt="" src="http://tonysyu.github.io/images/posts/2014/duplicates_directory.png" /&gt;
&lt;p&gt;You can see there are some newer versions of some files, but the author didn't
want get rid of the older files ... just in case. Or wait, are some parts of
the code still using the older versions? Sure, you can easily search (grep,
&lt;a class="reference external" href="https://pypi.python.org/pypi/grin"&gt;grin&lt;/a&gt;, ack, whatever), but don't make me
do extra work: I'm lazy.&lt;/p&gt;
&lt;p&gt;Let's look closer at the two duplicates at the bottom: &lt;tt class="docutils literal"&gt;id_paths.m&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;id_paths2.m&lt;/tt&gt;. Here's is a &lt;tt class="docutils literal"&gt;diff&lt;/tt&gt; of those two files:&lt;/p&gt;
&lt;img alt="" src="http://tonysyu.github.io/images/posts/2014/id_paths_diff.png" /&gt;
&lt;p&gt;Note that these files were a few hundred lines each, but the &lt;strong&gt;only&lt;/strong&gt;
difference between these two files are the lines highlighted in red. If there's
a newer version of something, just keep the newest version! Version control
will allow you to go back if really need to; otherwise, it's just
a distraction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="you-don-t-delete-enough-code"&gt;
&lt;h3&gt;You don't delete enough code!&lt;/h3&gt;
&lt;p&gt;(or: &amp;quot;Stop commenting out code and delete it already!&amp;quot;)&lt;/p&gt;
&lt;p&gt;Sometimes you add debugging code when you're developing your algorithms, but
the final product shouldn't have the code, so you do this:&lt;/p&gt;
&lt;img alt="" src="http://tonysyu.github.io/images/posts/2014/commented_out_code.png" /&gt;
&lt;p&gt;Notice the return statement in the middle of that code block. What you don't
see above is that there are a few hundred more lines of code that never get
run because of the early return statement. Keeping all that code around makes
it harder for you when you revisit the code. If you want to keep some debugging
code, save that separately so that you can easily focus on the important stuff.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-basic-commands"&gt;
&lt;h2&gt;The basic commands&lt;/h2&gt;
&lt;p&gt;Git is notoriously complicated (and inconsistent). That said, if you stick to
some basic commands, you can get pretty far along.&lt;/p&gt;
&lt;div class="section" id="git-init-create-a-repository"&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;git init&lt;/tt&gt;: Create a repository&lt;/h3&gt;
&lt;img alt="" src="http://tonysyu.github.io/images/posts/2014/git_init.png" /&gt;
&lt;p&gt;This is important to know, but it isn't that exciting. You just go into the
directory that contains all of your code (subdirectories will be included) and
run &lt;tt class="docutils literal"&gt;git init&lt;/tt&gt; to create the git repository (i.e. &amp;quot;repo&amp;quot;). This just needs to
be done once per project.&lt;/p&gt;
&lt;p&gt;Just think of the repository as a place where the history is being stored.
A lot happens behind the scenes but who cares. (Maybe you care, but only after
you really know how to &lt;em&gt;use&lt;/em&gt; it.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="git-add-and-git-commit-save-changes"&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;git add&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;git commit&lt;/tt&gt;: Save changes&lt;/h3&gt;
&lt;p&gt;The concept of &lt;tt class="docutils literal"&gt;add&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;commit&lt;/tt&gt; can be a bit confusing, especially if
you're coming from some other version control systems. Many other version
control systems just do what's equivalent to &lt;tt class="docutils literal"&gt;git commit &lt;span class="pre"&gt;--all&lt;/span&gt;&lt;/tt&gt; (or &lt;tt class="docutils literal"&gt;git
commit &lt;span class="pre"&gt;-a&lt;/span&gt;&lt;/tt&gt;).&lt;/p&gt;
&lt;img alt="" src="http://tonysyu.github.io/images/posts/2014/git_commit.png" /&gt;
&lt;p&gt;So let's assumed that we're just committing everything for now. This basically
saves all your changes... &amp;quot;But wait, I've been saving my changes in my
editor/IDE; hell, it even auto-saves.&amp;quot;&lt;/p&gt;
&lt;p&gt;The power of committing your changes to git is that you save the history. This
concept is much more powerful than something like &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Time_Machine_(Mac_OS)"&gt;Time Machine&lt;/a&gt;. You had
a reason for changing your code; you should document it (e.g., &amp;quot;Fix for when
the signal is all zeros&amp;quot;, &amp;quot;Update code to &amp;lt;this paper that improves on the
original algorithm&amp;gt;&amp;quot;). Sure you could add a code comment to (poorly) document
a few lines that changed, but what if those changes spanned multiple parts of
the code. Your commit (and &lt;em&gt;descriptive&lt;/em&gt; commit message) groups those logical
changes together.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;After&lt;/em&gt; you get into the habit of committing your changes using
&lt;tt class="docutils literal"&gt;git commit &lt;span class="pre"&gt;--all&lt;/span&gt;&lt;/tt&gt;, you'll want to evolve towards explicitly calling
&lt;tt class="docutils literal"&gt;git add&lt;/tt&gt; to specify which files you want to add to a specific commit. This
helps you group your changes better and helps you write a better, more
&lt;em&gt;descriptive&lt;/em&gt; commit message.&lt;/p&gt;
&lt;div class="section" id="git-add-organize-your-save"&gt;
&lt;h4&gt;&lt;tt class="docutils literal"&gt;git add&lt;/tt&gt;: Organize your save&lt;/h4&gt;
&lt;p&gt;We're not always great at concentrating on a single change. Explicitly
specifying the files you want to add to the commit will force you to be more
organized about the changes you made.&lt;/p&gt;
&lt;img alt="" src="http://tonysyu.github.io/images/posts/2014/git_add.png" /&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;git add&lt;/tt&gt; puts your changes into what's called the &amp;quot;staging area&amp;quot;, and then
then you call &lt;tt class="docutils literal"&gt;git commit&lt;/tt&gt; to commit everything from the staging area.&lt;/p&gt;
&lt;p&gt;More advanced: If you've made changes that aren't really part of the same
fix/feature/whatever, you can add specific lines, but that's for another post.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="git-log-your-code-history"&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;git log&lt;/tt&gt;: Your code history&lt;/h3&gt;
&lt;p&gt;The log is your code notebook. You have a history of all the commits you have
made. Most scientists want a history of the calculations they've done with all
the missteps and epiphanies documented. Sometimes you just don't remember why
you did something. This is a quick way to look back in time when your memory
fails you.&lt;/p&gt;
&lt;img alt="" src="http://tonysyu.github.io/images/posts/2014/git_log.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="git-diff-what-did-i-do"&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;git diff&lt;/tt&gt;: What did I do?&lt;/h3&gt;
&lt;p&gt;(or: &amp;quot;Finally! this works. Wait. What actually fixed the problem?&amp;quot;)&lt;/p&gt;
&lt;p&gt;You've made a ton of changes to fix some bug or add some feature. Inevitably,
you've made some changes that weren't really part of the feature (e.g. print
statements for debugging). &lt;tt class="docutils literal"&gt;git diff&lt;/tt&gt; allows you to check what has changed
from the original implementation.&lt;/p&gt;
&lt;img alt="" src="http://tonysyu.github.io/images/posts/2014/git_diff.png" /&gt;
&lt;p&gt;More advanced: If you're using the staging area properly, you call
&lt;tt class="docutils literal"&gt;git diff &lt;span class="pre"&gt;--staged&lt;/span&gt;&lt;/tt&gt; to make sure that all the code you've added really
pertains to the (very descriptive) commit message you're going to write.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="git-checkout-revisit-old-code"&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;git checkout&lt;/tt&gt;: Revisit old code&lt;/h3&gt;
&lt;p&gt;(or: &amp;quot;Argh, I wish I hadn’t made these changes!&amp;quot;)&lt;/p&gt;
&lt;p&gt;&amp;quot;I know my function didn't behave this way before,... wait am I sure about
that?&amp;quot; Well, you can always go back to old code by checking out an older
version.&lt;/p&gt;
&lt;img alt="" src="http://tonysyu.github.io/images/posts/2014/git_checkout.png" /&gt;
&lt;p&gt;Now you can try it out to see if this random dataset &lt;em&gt;actually&lt;/em&gt; worked with
the old code and figure out what changed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="git-blame-when-and-why-was-this-line-added"&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;git blame&lt;/tt&gt;: When and why was this line added?&lt;/h3&gt;
&lt;p&gt;We've all looked at some part of our code and forgotten why we added needed it.
&lt;tt class="docutils literal"&gt;git blame&lt;/tt&gt; allows you to look each line of a file and figure out when it was
added, and your commit message tells you why you added it.&lt;/p&gt;
&lt;img alt="" src="http://tonysyu.github.io/images/posts/2014/git_blame.png" /&gt;
&lt;p&gt;Note that this only works well if your commit messages are informative.
Otherwise, you still don't know why you wrote that perplexing line of code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Stop trying to invent your own version control
(i.e. don't write file that look like: &lt;tt class="docutils literal"&gt;my_script.py&lt;/tt&gt;/&lt;tt class="docutils literal"&gt;my_script_2.py&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;solver.py&lt;/tt&gt;/&lt;tt class="docutils literal"&gt;solver_old.py&lt;/tt&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Reproducibility and history are very important (especially for scientists)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The basic usage of git is pretty simple. (If you're not comfortable on the
command-line though, there are tools to help you out---see below.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Good commit messages are important&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Bad:   &amp;quot;update code&amp;quot;&lt;/li&gt;
&lt;li&gt;Good:  &amp;quot;Add calculate_standard_error function&amp;quot;, &amp;quot;Fix for NaN inputs&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This describes git usage from the perspective of someone who's comfortable
using the command line. Since programming isn't the focus of many scientists,
you may not be as comfortable on the command line. Fear not: There are many
GUI clients for git. I can't really throw my weight behind any of them since
I don't use any of them, but &lt;a class="reference external" href="https://www.atlassian.com/software/sourcetree/overview"&gt;SourceTree&lt;/a&gt; and &lt;a class="reference external" href="http://www.syntevo.com/smartgithg/"&gt;SmartGit&lt;/a&gt; both look pretty
popular.&lt;/p&gt;
&lt;p&gt;In the end, I don't think I was successful in converting any of my fellow
scientists to use source control. The problem is that it takes a bit of
discipline at the very beginning, and, like many things in life, it's hard to
see the benefits until you've already invested a bit of time to learn it.&lt;/p&gt;
&lt;p&gt;Now that my day job is software development, I don't need to convince anyone
of the benefits of source control. But maybe there's a scientist out there who
does need some convincing ...&lt;/p&gt;
&lt;/div&gt;
</summary><category term="git"></category><category term="craftsmanship"></category></entry><entry><title>Scikit-image tutorial at SciPy 2014</title><link href="http://tonysyu.github.io/scikit-image-tutorial-at-scipy-2014.html" rel="alternate"></link><updated>2014-07-23T00:00:00-04:00</updated><author><name>Tony S. Yu</name></author><id>tag:tonysyu.github.io,2014-07-23:scikit-image-tutorial-at-scipy-2014.html</id><summary type="html">&lt;a class="reference external image-reference" href="http://scikit-image.org/"&gt;&lt;img alt="" src="http://tonysyu.github.io/images/design/skimage_logo.png" /&gt;&lt;/a&gt;
&lt;p&gt;Juan Nunez-Iglesias, a fellow core-developer of &lt;a class="reference external" href="http://scikit-image.org/"&gt;scikit-image&lt;/a&gt;, and I gave
a scikit-image tutorial at &lt;a class="reference external" href="https://conference.scipy.org/scipy2014/"&gt;SciPy 2014&lt;/a&gt;! I gave the first 2 hours (minus
a quick intro), and Juan gave the second 2 hours. Surprisingly, this was the
first tutorial at the (U.S.) SciPy conference (Emmanuelle Gouillart gave a
tutorial at &lt;a class="reference external" href="https://github.com/scipy-lectures/scipy-lecture-notes/tree/master/advanced/image_processing"&gt;EuroSciPy 2013&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Anyway, if anyone happens to have 4 hours to kill, here are links to the
videos:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/MP-MTiCETYg"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/SE7h0IWD93Y"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/Yxpnvc4RHy4"&gt;Part 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/pWnYjqudKHs"&gt;Part 4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But, even if don't want to watch these videos, the accompanying notebooks are
worth a look: &lt;a class="reference external" href="https://github.com/scikit-image/skimage-tutorials/tree/master/scipy-2014"&gt;notebooks on github&lt;/a&gt;. Currently, the scikit-image website
doesn't have any introductory tutorial docs, so this is probably the most
complete source for introductory material. I'd like to integrate these
notebooks as a user guide on the website, but that may take a bit of time.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
</summary><category term="scikit-image"></category></entry></feed>